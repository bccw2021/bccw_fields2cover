//=============================================================================
//    Copyright (C) 2021-2024 Wageningen University - All Rights Reserved
//                     Author: Gonzalo Mier
//                        BSD-3 License
//=============================================================================

// 包含转向函数工具库
#include <steering_functions/utilities/utilities.hpp>
// 包含路径规划头文件
#include "fields2cover/path_planning/path_planning.h"
// 包含几何计算库
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/intersections.h>

typedef CGAL::Exact_predicates_inexact_constructions_kernel K;
typedef K::Point_2 CGALPoint;
typedef K::Segment_2 CGALSegment;

namespace f2c::pp {

// 根据给定的机器人、路线和转弯基类，规划完整的路径
// 这是主要的路径规划函数，将路线转换为具体的路径
F2CPath PathPlanning::planPath(const F2CRobot& robot, const F2CRoute& route, TurningBase& turn) {
  // 创建空路径对象用于存储结果
  F2CPath path;
  // 遍历路线中的所有作业带向量
  for (size_t i = 0; i < route.sizeVectorSwaths(); ++i) {
    // 获取前一组作业带，如果是第一组则为空
    auto prev_swaths = (i >0) ? route.getSwaths(i-1) : F2CSwaths();
    // 添加从前一组作业带到当前作业带的连接路径
    path += planPathForConnection(robot, prev_swaths, route.getConnection(i), route.getSwaths(i), turn);
    // 添加当前作业带内的路径
    path += planPath(robot, route.getSwaths(i), turn);
  }
  // 如果连接数量大于作业带向量数量，添加最后一个连接
  if (route.sizeConnections() > route.sizeVectorSwaths()) {
    path += planPathForConnection(robot, route.getLastSwaths(), route.getLastConnection(), F2CSwaths(), turn);
  }
  // 返回完整路径
  return path;
}

// 为一组作业带规划路径，包括作业带之间的转弯
// 这个函数处理单个作业带组内的路径规划
F2CPath PathPlanning::planPath(const F2CRobot& robot, const F2CSwaths& swaths, TurningBase& turn) {
  // 创建空路径对象
  F2CPath path;
  // 如果有多个作业带，需要处理作业带之间的转弯
  if (swaths.size() > 1) {
    // 遍历所有作业带（除了最后一个）
    for (size_t i = 0; i < swaths.size()-1; ++i) {
      // 将当前作业带添加到路径中，使用巡航速度
      path.appendSwath(swaths[i], robot.getCruiseVel());
      // 创建从当前作业带到下一个作业带的转弯路径
      F2CPath turn_path = turn.createTurn(robot,
          swaths[i].endPoint(), swaths[i].getOutAngle(),  // 当前作业带的终点和出口角度
          swaths[i + 1].startPoint(), swaths[i + 1].getInAngle());  // 下一个作业带的起点和入口角度
      // 将离散化的转弯路径添加到总路径中，离散化步长为0.1
      path += turn_path.discretize(0.1);
    }
  }
  // 添加最后一个作业带（如果存在）
  if (swaths.size() > 0) {
    path.appendSwath(swaths.back(), robot.getCruiseVel());
  }
  // 返回完整路径
  return path;
}

// 规划两组作业带之间的连接路径
// 这个函数处理作业带组之间的连接路径规划
F2CPath PathPlanning::planPathForConnection(const F2CRobot& robot,
    const F2CSwaths& s1,     // 第一组作业带
    const F2CMultiPoint& mp, // 连接点
    const F2CSwaths& s2,     // 第二组作业带
    TurningBase& turn) {     // 转弯生成器
  // 定义起点、终点及其角度
  F2CPoint p1, p2;
  double ang1, ang2;

  // 确定起点和起始角度
  if (s1.size() > 0) {
    // 如果第一组作业带非空，使用其最后一个作业带的终点和出口角度
    p1 = s1.back().endPoint();
    ang1 = s1.back().getOutAngle();
  } else if (mp.size() > 0) {
    // 否则，如果连接点非空，使用第一个连接点和其出口角度
    p1 = mp[0];
    ang1 = mp.getOutAngle(0);
  } else {
    // 如果都为空，返回空路径
    return {};
  }
  // 确定终点和终止角度
  if (s2.size() > 0) {
    // 如果第二组作业带非空，使用其第一个作业带的起点和入口角度
    p2 = s2[0].startPoint();
    ang2 = s2[0].getInAngle();
  } else if (mp.size() > 0) {
    // 否则，如果连接点非空，使用最后一个连接点和其入口角度
    p2 = mp.getLastPoint();
    ang2 = mp.getInAngle(mp.size()-1);
  } else {
    // 如果都为空，返回空路径
    return {};
  }
  // 调用重载版本的planPathForConnection函数
  return planPathForConnection(robot, p1, ang1, mp, p2, ang2, turn);
}

// 使用具体的起点和终点规划连接路径
// 这是planPathForConnection的重载版本，接受具体的点和角度
F2CPath PathPlanning::planPathForConnection(const F2CRobot& robot,
    const F2CPoint& p1, double ang1,  // 起点和起始角度
    const F2CMultiPoint& mp,          // 连接点集合
    const F2CPoint& p2, double ang2,  // 终点和终止角度
    TurningBase& turn) {              // 转弯生成器
  // 获取字段中的障碍物（如果有）
  std::vector<F2CCell> obstacles;
  // 检查是否提供了字段对象
  if (!mp.isEmpty() && mp.size() > 0) {
    // 获取字段内部的障碍物（如果有）
    // 注意：这里是一个简化的实现，实际项目中需要根据具体的数据结构获取障碍物
    // 如果您有实际的字段对象，可以包含下面的代码
    // 例如，如果有F2CField对象：
    // F2CField field = ...;
    // 遍历字段中的每个单元格
    // for (size_t i = 0; i < field.getField().size(); ++i) {
    //   F2CCell cell = field.getField().getCell(i);
    //   // 只处理内部环（障碍物）
    //   for (size_t j = 0; j < cell.getInteriorRingCount(); ++j) {
    //     F2CLinearRing ring = cell.getInteriorRing(j);
    //     F2CCell obstacle;
    //     obstacle.addRing(ring);
    //     obstacles.push_back(obstacle);
    //   }
    // }
  }

  // 简化连接点，生成一系列关键点和角度
  auto v_con = simplifyConnection(robot, p1, ang1, mp, p2, ang2);

  // 创建空路径
  F2CPath path;
  // 遍历简化后的连接点，创建相邻点之间的转弯
  for (int i = 1; i < v_con.size(); ++i) {
    // 前一个点的位置和角度
    F2CPoint prev_point = v_con[i-1].first;
    double prev_angle = v_con[i-1].second;
    // 当前点的位置和角度
    F2CPoint curr_point = v_con[i].first;
    double curr_angle = v_con[i].second;
    
    // 检查相邻点之间的路径是否穿过障碍物
    if (!obstacles.empty() && isPathIntersectObstacle(prev_point, curr_point, obstacles)) {
      // 如果穿过障碍物，使用A*算法规划绕过障碍物的路径
      double grid_size = robot.getWidth() / 2.0;  // 网格大小为机器人宽度的一半
      auto safe_points = planPathWithAStar(prev_point, curr_point, obstacles, grid_size);
      
      // 如果A*算法成功找到路径
      if (!safe_points.empty()) {
        F2CPoint last_point = prev_point;
        double last_angle = prev_angle;
        
        // 遍历A*生成的路径点
        for (size_t j = 1; j < safe_points.size(); ++j) {
          // 计算当前点到下一个点的角度
          double current_angle = (safe_points[j] - safe_points[j-1]).getAngleFromPoint();
          // 添加转弯路径
          path += turn.createTurn(robot, last_point, last_angle, safe_points[j], current_angle);
          // 更新上一个点和角度
          last_point = safe_points[j];
          last_angle = current_angle;
        }
        
        // 添加从最后一个安全点到目标点的转弯
        path += turn.createTurn(robot, last_point, last_angle, curr_point, curr_angle);
      } else {
        // 如果A*算法无法找到路径，退回到原始方法
        path += turn.createTurn(robot, prev_point, prev_angle, curr_point, curr_angle);
      }
    } else {
      // 如果没有障碍物或路径不穿过障碍物，使用原始方法
      path += turn.createTurn(robot, prev_point, prev_angle, curr_point, curr_angle);
    }
  }
  // 返回完整的连接路径
  return path;
}



// 计算平滑转弯半径
// 这个函数计算考虑机器人运动学约束的安全转弯半径
double PathPlanning::getSmoothTurningRadius(const F2CRobot& robot) {
  // 定义回旋曲线终点的坐标、角度和曲率
  double x, y, ang, k;
  // 计算回旋曲线的终点参数
  // robot.getMaxDiffCurv()：它表示机器人转向系统从直线行驶到达到最大转弯角度（或反之）所需的过渡距离。
  // 设置为 1e8 的影响：
  // - 表示机器人可以进行几乎无限的转弯
  // - 这意味着在规划路径时，可以避免不必要的转弯
  // - 有助于生成更平滑的路径
  // - 这是一个极大的值，接近无穷大
  // - 实际上意味着机器人可以几乎瞬间从直线行驶切换到最大曲率的转弯（或反之）
  // - 相当于假设机器人可以进行"理想化"的转弯，没有平滑过渡的限制
  //
  // 这表示车辆从原点出发，沿着一条逐渐向右弯曲的路径行驶10米，最终朝向约为5弧度（约287度），曲率为1.0（转弯半径为1米）。
  //
  // 参数依次为：起点x、起点y、起始角度、起始曲率、最大曲率变化率、缩放因子、最大曲率与最大曲率变化率的比值
  end_of_clothoid(0.0, 0.0, 0.0, 0.0, robot.getMaxDiffCurv(), 1.0,
      robot.getMaxCurv() / robot.getMaxDiffCurv(),
      &x, &y, &ang, &k);  // 输出参数：终点x、y、角度和曲率
  // 计算圆心坐标
  double xi = x - sin(ang) / robot.getMaxCurv();
  double yi = y + cos(ang) / robot.getMaxCurv();
  // 返回圆心到原点的距离，即平滑转弯半径
  return sqrt(xi*xi + yi*yi);
}

// 简化连接路径
// 这个函数将复杂的连接点序列简化为关键点，以生成更平滑的路径
std::vector<std::pair<F2CPoint, double>> PathPlanning::simplifyConnection(
    const F2CRobot& robot,            // 机器人参数
    const F2CPoint& p1, double ang1,  // 起点和起始角度
    const F2CMultiPoint& mp,          // 连接点集合
    const F2CPoint& p2, double ang2) { // 终点和终止角度
  // 计算安全距离（平滑转弯半径）
  const double safe_dist = getSmoothTurningRadius(robot);
  // 创建路径点和角度的向量
  std::vector<std::pair<F2CPoint, double>> path;
  // 添加起点和起始角度
  path.emplace_back(p1, ang1);

  // @@@ 如果起点和终点距离较近，或连接点太少，直接返回起点到终点的直接路径
  if (p1.distance(p2) < 6.0 * safe_dist || mp.size() < 2) {
    path.emplace_back(p2, ang2);
    return path;
  }

  // 筛选出角度变化明显的关键点
  std::vector<F2CPoint> vp;
  for (int i = 1; i < mp.size() - 1; ++i) {
    // 计算进入和离开当前点的角度
    double ang_in  = (mp[i] - mp[i-1]).getAngleFromPoint();
    double ang_out = (mp[i+1] - mp[i]).getAngleFromPoint();
    // 如果角度变化超过阈值，将该点视为关键点
    if (fabs(ang_in - ang_out) > 0.1) {
      vp.emplace_back(mp[i]);
    }
  }

  // 如果关键点太少，直接返回起点到终点的直接路径
  if (vp.size() < 2) {
    path.emplace_back(p2, ang2);
    return path;
  }

  // 处理每个关键点，生成平滑的入口点和出口点
  for (int i = 1; i < vp.size() - 1; ++i) {
    // 计算当前点到前后点的距离
    double dist_in  = vp[i].distance(vp[i-1]);
    double dist_out  = vp[i].distance(vp[i+1]);
    // 如果距离为零，跳过该点
    if (dist_in == 0.0 || dist_out == 0.0) {
      continue;
    }
    // 计算入口和出口点的距离，取距离的一半和安全距离的较小值
    double d_in  = min(0.5 * dist_in,  safe_dist);
    double d_out  = min(0.5 * dist_out,  safe_dist);
    // 计算入口点和出口点的位置
    F2CPoint p_in =  (vp[i-1] - vp[i]) * (d_in  / dist_in)  + vp[i];
    F2CPoint p_out = (vp[i+1] - vp[i]) * (d_out / dist_out) + vp[i];
    // 如果入口点与已有点的距离都足够大，添加入口点
    if (p_in.distance(path.back().first) > 3.0 * safe_dist &&
        p_in.distance(p1)                > 3.0 * safe_dist &&
        p_in.distance(p2)                > 3.0 * safe_dist) {
      // 计算入口角度
      double ang_in   = (vp[i  ] - vp[i-1]).getAngleFromPoint();
      // 添加入口点和角度
      path.emplace_back(p_in, ang_in);
    }
    // 如果出口点与已有点的距离都足够大，添加出口点
    if (p_out.distance(vp[i+1]) > 3.0 * safe_dist &&
        p_out.distance(p1)                > 3.0 * safe_dist &&
        p_out.distance(p2)                > 3.0 * safe_dist &&
        p_out.distance(p_in)              > 3.0 * safe_dist) {
      // 计算出口角度
      double ang_out  = (vp[i+1] - vp[i]).getAngleFromPoint();
      // 添加出口点和角度
      path.emplace_back(p_out, ang_out);
    }
  }
  // 添加终点和终止角度
  path.emplace_back(p2, ang2);
  // 返回简化后的路径点和角度
  return path;
}

// 检测路径是否与障碍物相交
bool PathPlanning::isPathIntersectObstacle(
    const F2CPoint& start_point, 
    const F2CPoint& end_point,
    const std::vector<F2CCell>& obstacles) {
  // 创建CGAL线段表示路径
  CGALSegment path_segment(CGALPoint(start_point.getX(), start_point.getY()),
                          CGALPoint(end_point.getX(), end_point.getY()));
  
  // 检查路径是否与任何障碍物边界相交
  for (const auto& obstacle : obstacles) {
    F2CLinearRing exterior_ring = obstacle.getExteriorRing();
    for (size_t i = 0; i < exterior_ring.size(); ++i) {
      // 获取障碍物外部环的点
      F2CPoint p1 = exterior_ring.getGeometry(i);
      F2CPoint p2 = exterior_ring.getGeometry((i + 1) % exterior_ring.size());
      
      // 创建CGAL线段表示障碍物边界
      CGALSegment obstacle_segment(CGALPoint(p1.getX(), p1.getY()),
                                  CGALPoint(p2.getX(), p2.getY()));
      
      // 检查线段是否相交
      auto result = CGAL::intersection(path_segment, obstacle_segment);
      if (result) {
        return true;  // 路径与障碍物相交
      }
    }
  }
  
  return false;  // 路径不与任何障碍物相交
}

// 检测点是否在障碍物内部或太接近障碍物
bool PathPlanning::isPointInObstacles(
    const F2CPoint& point,
    const std::vector<F2CCell>& obstacles,
    double safety_margin) {
  // 检查点是否在任何障碍物内部
  for (const auto& obstacle : obstacles) {
    // 检查点是否在障碍物内部
    if (obstacle.isPointIn(point)) {
      return true;
    }
    
    // 检查点是否太接近障碍物边界
    F2CLinearRing exterior_ring = obstacle.getExteriorRing();
    for (size_t i = 0; i < exterior_ring.size(); ++i) {
      F2CPoint p1 = exterior_ring.getGeometry(i);
      F2CPoint p2 = exterior_ring.getGeometry((i + 1) % exterior_ring.size());
      
      // 计算点到线段的距离
      CGALPoint cgal_point(point.getX(), point.getY());
      CGALSegment cgal_segment(CGALPoint(p1.getX(), p1.getY()),
                              CGALPoint(p2.getX(), p2.getY()));
      
      double distance = std::sqrt(CGAL::squared_distance(cgal_point, cgal_segment));
      if (distance < safety_margin) {
        return true;  // 点太接近障碍物
      }
    }
  }
  
  return false;  // 点不在任何障碍物内部且不太接近障碍物
}

// 使用A*算法规划绕过障碍物的路径
std::vector<F2CPoint> PathPlanning::planPathWithAStar(
    const F2CPoint& start_point,
    const F2CPoint& end_point,
    const std::vector<F2CCell>& obstacles,
    double grid_size) {
  // 定义一个网格地图边界，扩展一些余量
  double min_x = std::min(start_point.getX(), end_point.getX()) - 20.0 * grid_size;
  double max_x = std::max(start_point.getX(), end_point.getX()) + 20.0 * grid_size;
  double min_y = std::min(start_point.getY(), end_point.getY()) - 20.0 * grid_size;
  double max_y = std::max(start_point.getY(), end_point.getY()) + 20.0 * grid_size;
  
  // 安全距离为网格大小的1.5倍
  double safety_margin = 1.5 * grid_size;
  
  // 定义网格坐标的哈希函数
  struct GridCoordHash {
    std::size_t operator()(const std::pair<int, int>& k) const {
      return std::hash<int>()(k.first) ^ (std::hash<int>()(k.second) << 1);
    }
  };
  
  // 将连续坐标转换为网格坐标
  auto toGridCoord = [grid_size, min_x, min_y](const F2CPoint& p) -> std::pair<int, int> {
    int grid_x = static_cast<int>((p.getX() - min_x) / grid_size);
    int grid_y = static_cast<int>((p.getY() - min_y) / grid_size);
    return {grid_x, grid_y};
  };
  
  // 将网格坐标转换为连续坐标（网格中心）
  auto toContinuousCoord = [grid_size, min_x, min_y](const std::pair<int, int>& grid) -> F2CPoint {
    double x = min_x + (grid.first + 0.5) * grid_size;
    double y = min_y + (grid.second + 0.5) * grid_size;
    return F2CPoint(x, y);
  };
  
  // 启发式函数：使用欧几里得距离
  auto heuristic = [](const std::pair<int, int>& a, const std::pair<int, int>& b) -> double {
    return std::sqrt(std::pow(a.first - b.first, 2) + std::pow(a.second - b.second, 2));
  };
  
  // 转换起点和终点为网格坐标
  std::pair<int, int> start_grid = toGridCoord(start_point);
  std::pair<int, int> end_grid = toGridCoord(end_point);
  
  // 定义相邻方向（8个方向）
  std::vector<std::pair<int, int>> directions = {
    {-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}
  };
  
  // 定义开集（待探索的节点）和闭集（已探索的节点）
  std::priority_queue<std::pair<double, std::pair<int, int>>,
                      std::vector<std::pair<double, std::pair<int, int>>>,
                      std::greater<std::pair<double, std::pair<int, int>>>> open_set;
  std::unordered_set<std::pair<int, int>, GridCoordHash> closed_set;
  
  // 记录每个节点的父节点，用于重建路径
  std::unordered_map<std::pair<int, int>, std::pair<int, int>, GridCoordHash> came_from;
  
  // 记录从起点到每个节点的代价
  std::unordered_map<std::pair<int, int>, double, GridCoordHash> g_score;
  g_score[start_grid] = 0.0;
  
  // 记录从起点经过每个节点到目标的估计总代价
  std::unordered_map<std::pair<int, int>, double, GridCoordHash> f_score;
  f_score[start_grid] = heuristic(start_grid, end_grid);
  
  // 将起点加入开集
  open_set.push({f_score[start_grid], start_grid});
  
  // A*算法主循环
  while (!open_set.empty()) {
    // 获取f值最小的节点
    auto current = open_set.top().second;
    open_set.pop();
    
    // 如果到达终点，重建路径并返回
    if (current == end_grid) {
      std::vector<F2CPoint> path;
      // 重建路径
      auto node = current;
      while (node != start_grid) {
        path.push_back(toContinuousCoord(node));
        node = came_from[node];
      }
      // 添加起点
      path.push_back(start_point);
      // 反转路径，使其从起点到终点
      std::reverse(path.begin(), path.end());
      // 最后一个点使用确切的终点坐标
      path.back() = end_point;
      return path;
    }
    
    // 将当前节点加入闭集
    closed_set.insert(current);
    
    // 探索相邻节点
    for (const auto& dir : directions) {
      std::pair<int, int> neighbor = {current.first + dir.first, current.second + dir.second};
      
      // 检查是否超出地图边界
      F2CPoint neighbor_point = toContinuousCoord(neighbor);
      if (neighbor_point.getX() < min_x || neighbor_point.getX() > max_x ||
          neighbor_point.getY() < min_y || neighbor_point.getY() > max_y) {
        continue;
      }
      
      // 检查是否在障碍物内部或太接近障碍物
      if (isPointInObstacles(neighbor_point, obstacles, safety_margin)) {
        continue;
      }
      
      // 如果节点已经在闭集中，跳过
      if (closed_set.find(neighbor) != closed_set.end()) {
        continue;
      }
      
      // 计算从起点到相邻节点的新代价
      double tentative_g_score = g_score[current] + heuristic(current, neighbor);
      
      // 如果相邻节点不在开集中，或者新路径更好，更新路径
      if (g_score.find(neighbor) == g_score.end() || tentative_g_score < g_score[neighbor]) {
        // 更新父节点和代价
        came_from[neighbor] = current;
        g_score[neighbor] = tentative_g_score;
        f_score[neighbor] = tentative_g_score + heuristic(neighbor, end_grid);
        
        // 将相邻节点加入开集
        open_set.push({f_score[neighbor], neighbor});
      }
    }
  }
  
  // 如果无法找到路径，返回空向量
  return {};
}

}  // namespace f2c::pp

// 核心代码实现原理：
// 1. 路径规划模块采用分层设计，将复杂的路径规划任务分解为多个子任务：
//    - 作业带内路径规划（直线行驶）
//    - 作业带之间的转弯路径规划
//    - 作业带组之间的连接路径规划
// 
// 2. planPath函数是主要入口，它处理整个路线的路径规划，包括：
//    - 遍历路线中的所有作业带组
//    - 为每组作业带规划内部路径
//    - 规划相邻作业带组之间的连接路径
// 
// 3. 作业带内路径规划很直接，就是沿着作业带直线行驶
// 
// 4. 作业带之间的转弯由TurningBase子类实现，支持多种转弯算法（杜宾斯曲线、里德谢普曲线等）
// 
// 5. 连接路径规划的关键是simplifyConnection函数，它通过以下步骤简化复杂的连接：
//    - 计算安全转弯半径，确保转弯不会过于急促
//    - 筛选角度变化明显的关键点
//    - 为每个关键点生成平滑的入口点和出口点
//    - 确保所有点之间的距离足够大，避免不必要的复杂转弯
// 
// 6. getSmoothTurningRadius函数计算考虑机器人运动学约束的安全转弯半径，使用回旋曲线（clothoid）
//    来确保曲率连续变化，提高路径的平滑性

